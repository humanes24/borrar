name: Release Custom Telegraf

on:
  push:
    tags:
      - "v*"
      - "custom-telegraf-*"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: arm
            goarm: '7'
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Build matrix artifacts
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
          CGO_ENABLED: 0
        run: |
          set -euo pipefail
          chmod +x cicd.sh
          ./cicd.sh build \
            --version "1.35.4" \
            --mode mini \
            --config-dir config \
            --plugins-dir plugins \
            --dist-dir dist \
            --go-get-file dependencies.txt \
            --artifact-dir out \
            --keep-source

      - name: Package via Telegraf Makefile (Linux only)
        if: ${{ matrix.goos == 'linux' }}
        run: |
          set -euo pipefail
          echo "Packaging with Telegraf Makefile in telegraf_src"
          pushd telegraf_src
          if make -n tools >/dev/null 2>&1; then make tools; fi
          if make -n package >/dev/null 2>&1; then
            make package
          else
            if make -n package-deb >/dev/null 2>&1; then make package-deb; fi
            if make -n package-rpm >/dev/null 2>&1; then make package-rpm || true; fi
          fi
          popd
          mkdir -p out
          shopt -s nullglob
          for f in telegraf_src/dist/*.{deb,rpm}; do
            echo "Found package: $f"; cp -f "$f" out/;
          done
          shopt -u nullglob

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            out/*
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/**/*.tar.gz
            release/**/*.sha256
            release/**/*.deb
            release/**/*.rpm
            release/**/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
